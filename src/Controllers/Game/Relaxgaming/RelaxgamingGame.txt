<?php
namespace Wainwright\CasinoDog\Controllers\Game\Relaxgaming;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Wainwright\CasinoDog\Facades\ProxyHelperFacade;
use Wainwright\CasinoDog\Controllers\Game\GameKernelTrait;
use Illuminate\Http\Client\ConnectionException;
use Wainwright\CasinoDog\Controllers\Game\GameKernel;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Cache;
use Illuminate\Contracts\Cache\LockTimeoutException;
use Wainwright\CasinoDog\Controllers\Game\OperatorsController;

class RelaxgamingGame extends RelaxgamingMain
{
    use GameKernelTrait;

    public function game_event($request)
    {   
        $action = $request->action;
        $internal_token = $request->internal_token;
        $real_gameserver_url = 'https://dev-casino-client.api.relaxg.net/game/'.$action;
        $real_game_server_url = 'https://stag-casino-client.api.relaxg.net/game/'.$action;
        
        $real_response = $this->curl_request($real_gameserver_url, $request);
        $data_origin = json_decode($real_response->getContent(), true);

        $origin_balance = Cache::get($internal_token.'::relaxgamingOriginBalance');
        
        if(!$origin_balance) {
            if(isset($data_origin['stats'])) {
                if(isset($data_origin['stats']['b'])) {
                    Cache::set($internal_token.'::relaxgamingOriginBalance', (int) $data_origin['stats']['b']);
                    $origin_balance = (int) Cache::get($internal_token.'::relaxgamingOriginBalance');
                }
            }
        }
        
        if($action === 'funmoneylogin') {
            $data_origin['stats']['currency'] = 'USD';
            $data_origin['stats']['b'] = (int) $this->get_balance($internal_token);
        }

        if($action === 'play') {            
            //$data_origin['subgameTriggered'] = true;
            //$data_origin['ended'] = false;
            //$data_origin['freeSpinAwardedCount'] = 10;
            $origin_balance = (int) Cache::get($internal_token.'::relaxgamingOriginBalance');
            if(!$origin_balance) {
                Cache::set($internal_token.'::relaxgamingOriginBalance', (int) $data_origin['stats']['b']);
                $origin_balance = (int) Cache::get($internal_token.'::relaxgamingOriginBalance');
            }
            $new_balance = (int) $data_origin['stats']['b'];

            if($origin_balance !== $new_balance) {
                if($origin_balance > $new_balance) {
                    $winAmount = 0;
                    $betAmount = (int) ($origin_balance - $new_balance);
                } else {
                    $betAmount = 0;
                    $winAmount = (int) ($origin_balance - $new_balance);
                }
                Cache::set($internal_token.'::relaxgamingOriginBalance', $data_origin['stats']['b']);
                $process_and_get_balance = $this->process_game($internal_token, $betAmount, $winAmount, $data_origin);
                $data_origin['stats']['b'] = $process_and_get_balance;
            } else {
                Cache::set($internal_token.'::relaxgamingOriginBalance', $data_origin['stats']['b']);
                $balance_call = ($this->get_balance($internal_token));
                $data_origin['stats']['b'] = $balance_call;
            }
            $data_origin['origin_balance'] = $origin_balance;
        }
        return $data_origin;
    }

    public function curl_request($url, $request)
    {
        $response = ProxyHelperFacade::CreateProxy($request)->toUrl($url);
        return $response;
    }

    public function example()
    {
    }



}
